// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: grpc/proto/grpc_ut.proto

package utpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UTServiceClient is the client API for UTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UTServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type uTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUTServiceClient(cc grpc.ClientConnInterface) UTServiceClient {
	return &uTServiceClient{cc}
}

func (c *uTServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/UTService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UTServiceServer is the server API for UTService service.
// All implementations must embed UnimplementedUTServiceServer
// for forward compatibility
type UTServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedUTServiceServer()
}

// UnimplementedUTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUTServiceServer struct {
}

func (UnimplementedUTServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedUTServiceServer) mustEmbedUnimplementedUTServiceServer() {}

// UnsafeUTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UTServiceServer will
// result in compilation errors.
type UnsafeUTServiceServer interface {
	mustEmbedUnimplementedUTServiceServer()
}

func RegisterUTServiceServer(s grpc.ServiceRegistrar, srv UTServiceServer) {
	s.RegisterService(&UTService_ServiceDesc, srv)
}

func _UTService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UTService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UTService_ServiceDesc is the grpc.ServiceDesc for UTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UTService",
	HandlerType: (*UTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _UTService_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/grpc_ut.proto",
}
